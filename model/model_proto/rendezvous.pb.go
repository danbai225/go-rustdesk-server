// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.11
// source: model/protos/rendezvous.proto

package model_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnType int32

const (
	ConnType_DEFAULT_CONN  ConnType = 0
	ConnType_FILE_TRANSFER ConnType = 1
	ConnType_PORT_FORWARD  ConnType = 2
	ConnType_RDP           ConnType = 3
)

// Enum value maps for ConnType.
var (
	ConnType_name = map[int32]string{
		0: "DEFAULT_CONN",
		1: "FILE_TRANSFER",
		2: "PORT_FORWARD",
		3: "RDP",
	}
	ConnType_value = map[string]int32{
		"DEFAULT_CONN":  0,
		"FILE_TRANSFER": 1,
		"PORT_FORWARD":  2,
		"RDP":           3,
	}
)

func (x ConnType) Enum() *ConnType {
	p := new(ConnType)
	*p = x
	return p
}

func (x ConnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_protos_rendezvous_proto_enumTypes[0].Descriptor()
}

func (ConnType) Type() protoreflect.EnumType {
	return &file_model_protos_rendezvous_proto_enumTypes[0]
}

func (x ConnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnType.Descriptor instead.
func (ConnType) EnumDescriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{0}
}

type NatType int32

const (
	NatType_UNKNOWN_NAT NatType = 0
	NatType_ASYMMETRIC  NatType = 1
	NatType_SYMMETRIC   NatType = 2
)

// Enum value maps for NatType.
var (
	NatType_name = map[int32]string{
		0: "UNKNOWN_NAT",
		1: "ASYMMETRIC",
		2: "SYMMETRIC",
	}
	NatType_value = map[string]int32{
		"UNKNOWN_NAT": 0,
		"ASYMMETRIC":  1,
		"SYMMETRIC":   2,
	}
)

func (x NatType) Enum() *NatType {
	p := new(NatType)
	*p = x
	return p
}

func (x NatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NatType) Descriptor() protoreflect.EnumDescriptor {
	return file_model_protos_rendezvous_proto_enumTypes[1].Descriptor()
}

func (NatType) Type() protoreflect.EnumType {
	return &file_model_protos_rendezvous_proto_enumTypes[1]
}

func (x NatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NatType.Descriptor instead.
func (NatType) EnumDescriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{1}
}

type RegisterPkResponse_Result int32

const (
	RegisterPkResponse_OK                RegisterPkResponse_Result = 0
	RegisterPkResponse_UUID_MISMATCH     RegisterPkResponse_Result = 2
	RegisterPkResponse_ID_EXISTS         RegisterPkResponse_Result = 3
	RegisterPkResponse_TOO_FREQUENT      RegisterPkResponse_Result = 4
	RegisterPkResponse_INVALID_ID_FORMAT RegisterPkResponse_Result = 5
	RegisterPkResponse_NOT_SUPPORT       RegisterPkResponse_Result = 6
	RegisterPkResponse_SERVER_ERROR      RegisterPkResponse_Result = 7
)

// Enum value maps for RegisterPkResponse_Result.
var (
	RegisterPkResponse_Result_name = map[int32]string{
		0: "OK",
		2: "UUID_MISMATCH",
		3: "ID_EXISTS",
		4: "TOO_FREQUENT",
		5: "INVALID_ID_FORMAT",
		6: "NOT_SUPPORT",
		7: "SERVER_ERROR",
	}
	RegisterPkResponse_Result_value = map[string]int32{
		"OK":                0,
		"UUID_MISMATCH":     2,
		"ID_EXISTS":         3,
		"TOO_FREQUENT":      4,
		"INVALID_ID_FORMAT": 5,
		"NOT_SUPPORT":       6,
		"SERVER_ERROR":      7,
	}
)

func (x RegisterPkResponse_Result) Enum() *RegisterPkResponse_Result {
	p := new(RegisterPkResponse_Result)
	*p = x
	return p
}

func (x RegisterPkResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterPkResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_model_protos_rendezvous_proto_enumTypes[2].Descriptor()
}

func (RegisterPkResponse_Result) Type() protoreflect.EnumType {
	return &file_model_protos_rendezvous_proto_enumTypes[2]
}

func (x RegisterPkResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterPkResponse_Result.Descriptor instead.
func (RegisterPkResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{8, 0}
}

type PunchHoleResponse_Failure int32

const (
	PunchHoleResponse_ID_NOT_EXIST     PunchHoleResponse_Failure = 0
	PunchHoleResponse_OFFLINE          PunchHoleResponse_Failure = 2
	PunchHoleResponse_LICENSE_MISMATCH PunchHoleResponse_Failure = 3
	PunchHoleResponse_LICENSE_OVERUSE  PunchHoleResponse_Failure = 4
)

// Enum value maps for PunchHoleResponse_Failure.
var (
	PunchHoleResponse_Failure_name = map[int32]string{
		0: "ID_NOT_EXIST",
		2: "OFFLINE",
		3: "LICENSE_MISMATCH",
		4: "LICENSE_OVERUSE",
	}
	PunchHoleResponse_Failure_value = map[string]int32{
		"ID_NOT_EXIST":     0,
		"OFFLINE":          2,
		"LICENSE_MISMATCH": 3,
		"LICENSE_OVERUSE":  4,
	}
)

func (x PunchHoleResponse_Failure) Enum() *PunchHoleResponse_Failure {
	p := new(PunchHoleResponse_Failure)
	*p = x
	return p
}

func (x PunchHoleResponse_Failure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PunchHoleResponse_Failure) Descriptor() protoreflect.EnumDescriptor {
	return file_model_protos_rendezvous_proto_enumTypes[3].Descriptor()
}

func (PunchHoleResponse_Failure) Type() protoreflect.EnumType {
	return &file_model_protos_rendezvous_proto_enumTypes[3]
}

func (x PunchHoleResponse_Failure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PunchHoleResponse_Failure.Descriptor instead.
func (PunchHoleResponse_Failure) EnumDescriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{9, 0}
}

type RegisterPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Serial int32  `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *RegisterPeer) Reset() {
	*x = RegisterPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeer) ProtoMessage() {}

func (x *RegisterPeer) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeer.ProtoReflect.Descriptor instead.
func (*RegisterPeer) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterPeer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterPeer) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

type RegisterPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestPk bool `protobuf:"varint,2,opt,name=request_pk,json=requestPk,proto3" json:"request_pk,omitempty"`
}

func (x *RegisterPeerResponse) Reset() {
	*x = RegisterPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPeerResponse) ProtoMessage() {}

func (x *RegisterPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPeerResponse.ProtoReflect.Descriptor instead.
func (*RegisterPeerResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterPeerResponse) GetRequestPk() bool {
	if x != nil {
		return x.RequestPk
	}
	return false
}

type PunchHoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NatType    NatType  `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=hbb.NatType" json:"nat_type,omitempty"`
	LicenceKey string   `protobuf:"bytes,3,opt,name=licence_key,json=licenceKey,proto3" json:"licence_key,omitempty"`
	ConnType   ConnType `protobuf:"varint,4,opt,name=conn_type,json=connType,proto3,enum=hbb.ConnType" json:"conn_type,omitempty"`
	Token      string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *PunchHoleRequest) Reset() {
	*x = PunchHoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunchHoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunchHoleRequest) ProtoMessage() {}

func (x *PunchHoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunchHoleRequest.ProtoReflect.Descriptor instead.
func (*PunchHoleRequest) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{2}
}

func (x *PunchHoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PunchHoleRequest) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_UNKNOWN_NAT
}

func (x *PunchHoleRequest) GetLicenceKey() string {
	if x != nil {
		return x.LicenceKey
	}
	return ""
}

func (x *PunchHoleRequest) GetConnType() ConnType {
	if x != nil {
		return x.ConnType
	}
	return ConnType_DEFAULT_CONN
}

func (x *PunchHoleRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PunchHole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte  `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	RelayServer string  `protobuf:"bytes,2,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	NatType     NatType `protobuf:"varint,3,opt,name=nat_type,json=natType,proto3,enum=hbb.NatType" json:"nat_type,omitempty"`
}

func (x *PunchHole) Reset() {
	*x = PunchHole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunchHole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunchHole) ProtoMessage() {}

func (x *PunchHole) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunchHole.ProtoReflect.Descriptor instead.
func (*PunchHole) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{3}
}

func (x *PunchHole) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *PunchHole) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (x *PunchHole) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_UNKNOWN_NAT
}

type TestNatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial int32 `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *TestNatRequest) Reset() {
	*x = TestNatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNatRequest) ProtoMessage() {}

func (x *TestNatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNatRequest.ProtoReflect.Descriptor instead.
func (*TestNatRequest) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{4}
}

func (x *TestNatRequest) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

// per my test, uint/int has no difference in encoding, int not good for negative, use sint for negative
type TestNatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32         `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Cu   *ConfigUpdate `protobuf:"bytes,2,opt,name=cu,proto3" json:"cu,omitempty"` // for mobile
}

func (x *TestNatResponse) Reset() {
	*x = TestNatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNatResponse) ProtoMessage() {}

func (x *TestNatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNatResponse.ProtoReflect.Descriptor instead.
func (*TestNatResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{5}
}

func (x *TestNatResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestNatResponse) GetCu() *ConfigUpdate {
	if x != nil {
		return x.Cu
	}
	return nil
}

type PunchHoleSent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte  `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	Id          string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RelayServer string  `protobuf:"bytes,3,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	NatType     NatType `protobuf:"varint,4,opt,name=nat_type,json=natType,proto3,enum=hbb.NatType" json:"nat_type,omitempty"`
	Version     string  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PunchHoleSent) Reset() {
	*x = PunchHoleSent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunchHoleSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunchHoleSent) ProtoMessage() {}

func (x *PunchHoleSent) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunchHoleSent.ProtoReflect.Descriptor instead.
func (*PunchHoleSent) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{6}
}

func (x *PunchHoleSent) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *PunchHoleSent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PunchHoleSent) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (x *PunchHoleSent) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_UNKNOWN_NAT
}

func (x *PunchHoleSent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type RegisterPk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid  []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Pk    []byte `protobuf:"bytes,3,opt,name=pk,proto3" json:"pk,omitempty"`
	OldId string `protobuf:"bytes,4,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
}

func (x *RegisterPk) Reset() {
	*x = RegisterPk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPk) ProtoMessage() {}

func (x *RegisterPk) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPk.ProtoReflect.Descriptor instead.
func (*RegisterPk) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterPk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterPk) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RegisterPk) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *RegisterPk) GetOldId() string {
	if x != nil {
		return x.OldId
	}
	return ""
}

type RegisterPkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RegisterPkResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=hbb.RegisterPkResponse_Result" json:"result,omitempty"`
}

func (x *RegisterPkResponse) Reset() {
	*x = RegisterPkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPkResponse) ProtoMessage() {}

func (x *RegisterPkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPkResponse.ProtoReflect.Descriptor instead.
func (*RegisterPkResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterPkResponse) GetResult() RegisterPkResponse_Result {
	if x != nil {
		return x.Result
	}
	return RegisterPkResponse_OK
}

type PunchHoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte                    `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	Pk          []byte                    `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Failure     PunchHoleResponse_Failure `protobuf:"varint,3,opt,name=failure,proto3,enum=hbb.PunchHoleResponse_Failure" json:"failure,omitempty"`
	RelayServer string                    `protobuf:"bytes,4,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	// Types that are assignable to Union:
	//
	//	*PunchHoleResponse_NatType
	//	*PunchHoleResponse_IsLocal
	Union        isPunchHoleResponse_Union `protobuf_oneof:"union"`
	OtherFailure string                    `protobuf:"bytes,7,opt,name=other_failure,json=otherFailure,proto3" json:"other_failure,omitempty"`
}

func (x *PunchHoleResponse) Reset() {
	*x = PunchHoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunchHoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunchHoleResponse) ProtoMessage() {}

func (x *PunchHoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunchHoleResponse.ProtoReflect.Descriptor instead.
func (*PunchHoleResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{9}
}

func (x *PunchHoleResponse) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *PunchHoleResponse) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

func (x *PunchHoleResponse) GetFailure() PunchHoleResponse_Failure {
	if x != nil {
		return x.Failure
	}
	return PunchHoleResponse_ID_NOT_EXIST
}

func (x *PunchHoleResponse) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (m *PunchHoleResponse) GetUnion() isPunchHoleResponse_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *PunchHoleResponse) GetNatType() NatType {
	if x, ok := x.GetUnion().(*PunchHoleResponse_NatType); ok {
		return x.NatType
	}
	return NatType_UNKNOWN_NAT
}

func (x *PunchHoleResponse) GetIsLocal() bool {
	if x, ok := x.GetUnion().(*PunchHoleResponse_IsLocal); ok {
		return x.IsLocal
	}
	return false
}

func (x *PunchHoleResponse) GetOtherFailure() string {
	if x != nil {
		return x.OtherFailure
	}
	return ""
}

type isPunchHoleResponse_Union interface {
	isPunchHoleResponse_Union()
}

type PunchHoleResponse_NatType struct {
	NatType NatType `protobuf:"varint,5,opt,name=nat_type,json=natType,proto3,enum=hbb.NatType,oneof"`
}

type PunchHoleResponse_IsLocal struct {
	IsLocal bool `protobuf:"varint,6,opt,name=is_local,json=isLocal,proto3,oneof"`
}

func (*PunchHoleResponse_NatType) isPunchHoleResponse_Union() {}

func (*PunchHoleResponse_IsLocal) isPunchHoleResponse_Union() {}

type ConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial            int32    `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	RendezvousServers []string `protobuf:"bytes,2,rep,name=rendezvous_servers,json=rendezvousServers,proto3" json:"rendezvous_servers,omitempty"`
}

func (x *ConfigUpdate) Reset() {
	*x = ConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdate) ProtoMessage() {}

func (x *ConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdate.ProtoReflect.Descriptor instead.
func (*ConfigUpdate) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigUpdate) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *ConfigUpdate) GetRendezvousServers() []string {
	if x != nil {
		return x.RendezvousServers
	}
	return nil
}

type RequestRelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid        string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SocketAddr  []byte   `protobuf:"bytes,3,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	RelayServer string   `protobuf:"bytes,4,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	Secure      bool     `protobuf:"varint,5,opt,name=secure,proto3" json:"secure,omitempty"`
	LicenceKey  string   `protobuf:"bytes,6,opt,name=licence_key,json=licenceKey,proto3" json:"licence_key,omitempty"`
	ConnType    ConnType `protobuf:"varint,7,opt,name=conn_type,json=connType,proto3,enum=hbb.ConnType" json:"conn_type,omitempty"`
	Token       string   `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestRelay) Reset() {
	*x = RequestRelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRelay) ProtoMessage() {}

func (x *RequestRelay) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRelay.ProtoReflect.Descriptor instead.
func (*RequestRelay) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{11}
}

func (x *RequestRelay) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestRelay) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RequestRelay) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *RequestRelay) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (x *RequestRelay) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *RequestRelay) GetLicenceKey() string {
	if x != nil {
		return x.LicenceKey
	}
	return ""
}

func (x *RequestRelay) GetConnType() ConnType {
	if x != nil {
		return x.ConnType
	}
	return ConnType_DEFAULT_CONN
}

func (x *RequestRelay) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RelayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RelayServer string `protobuf:"bytes,3,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	// Types that are assignable to Union:
	//
	//	*RelayResponse_Id
	//	*RelayResponse_Pk
	Union        isRelayResponse_Union `protobuf_oneof:"union"`
	RefuseReason string                `protobuf:"bytes,6,opt,name=refuse_reason,json=refuseReason,proto3" json:"refuse_reason,omitempty"`
	Version      string                `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RelayResponse) Reset() {
	*x = RelayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayResponse) ProtoMessage() {}

func (x *RelayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayResponse.ProtoReflect.Descriptor instead.
func (*RelayResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{12}
}

func (x *RelayResponse) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *RelayResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RelayResponse) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (m *RelayResponse) GetUnion() isRelayResponse_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *RelayResponse) GetId() string {
	if x, ok := x.GetUnion().(*RelayResponse_Id); ok {
		return x.Id
	}
	return ""
}

func (x *RelayResponse) GetPk() []byte {
	if x, ok := x.GetUnion().(*RelayResponse_Pk); ok {
		return x.Pk
	}
	return nil
}

func (x *RelayResponse) GetRefuseReason() string {
	if x != nil {
		return x.RefuseReason
	}
	return ""
}

func (x *RelayResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type isRelayResponse_Union interface {
	isRelayResponse_Union()
}

type RelayResponse_Id struct {
	Id string `protobuf:"bytes,4,opt,name=id,proto3,oneof"`
}

type RelayResponse_Pk struct {
	Pk []byte `protobuf:"bytes,5,opt,name=pk,proto3,oneof"`
}

func (*RelayResponse_Id) isRelayResponse_Union() {}

func (*RelayResponse_Pk) isRelayResponse_Union() {}

type SoftwareUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SoftwareUpdate) Reset() {
	*x = SoftwareUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareUpdate) ProtoMessage() {}

func (x *SoftwareUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareUpdate.ProtoReflect.Descriptor instead.
func (*SoftwareUpdate) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{13}
}

func (x *SoftwareUpdate) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// if in same intranet, punch hole won't work both for udp and tcp,
// even some router has below connection error if we connect itself,
//
//	{ kind: Other, error: "could not resolve to any address" },
//
// so we request local address to connect.
type FetchLocalAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	RelayServer string `protobuf:"bytes,2,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
}

func (x *FetchLocalAddr) Reset() {
	*x = FetchLocalAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchLocalAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLocalAddr) ProtoMessage() {}

func (x *FetchLocalAddr) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLocalAddr.ProtoReflect.Descriptor instead.
func (*FetchLocalAddr) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{14}
}

func (x *FetchLocalAddr) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *FetchLocalAddr) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

type LocalAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SocketAddr  []byte `protobuf:"bytes,1,opt,name=socket_addr,json=socketAddr,proto3" json:"socket_addr,omitempty"`
	LocalAddr   []byte `protobuf:"bytes,2,opt,name=local_addr,json=localAddr,proto3" json:"local_addr,omitempty"`
	RelayServer string `protobuf:"bytes,3,opt,name=relay_server,json=relayServer,proto3" json:"relay_server,omitempty"`
	Id          string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *LocalAddr) Reset() {
	*x = LocalAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAddr) ProtoMessage() {}

func (x *LocalAddr) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAddr.ProtoReflect.Descriptor instead.
func (*LocalAddr) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{15}
}

func (x *LocalAddr) GetSocketAddr() []byte {
	if x != nil {
		return x.SocketAddr
	}
	return nil
}

func (x *LocalAddr) GetLocalAddr() []byte {
	if x != nil {
		return x.LocalAddr
	}
	return nil
}

func (x *LocalAddr) GetRelayServer() string {
	if x != nil {
		return x.RelayServer
	}
	return ""
}

func (x *LocalAddr) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocalAddr) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PeerDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Mac      string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Platform string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Misc     string `protobuf:"bytes,7,opt,name=misc,proto3" json:"misc,omitempty"`
}

func (x *PeerDiscovery) Reset() {
	*x = PeerDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDiscovery) ProtoMessage() {}

func (x *PeerDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDiscovery.ProtoReflect.Descriptor instead.
func (*PeerDiscovery) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{16}
}

func (x *PeerDiscovery) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *PeerDiscovery) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *PeerDiscovery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerDiscovery) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PeerDiscovery) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PeerDiscovery) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PeerDiscovery) GetMisc() string {
	if x != nil {
		return x.Misc
	}
	return ""
}

type OnlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Peers []string `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *OnlineRequest) Reset() {
	*x = OnlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRequest) ProtoMessage() {}

func (x *OnlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRequest.ProtoReflect.Descriptor instead.
func (*OnlineRequest) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{17}
}

func (x *OnlineRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OnlineRequest) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type OnlineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []byte `protobuf:"bytes,1,opt,name=states,proto3" json:"states,omitempty"`
}

func (x *OnlineResponse) Reset() {
	*x = OnlineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineResponse) ProtoMessage() {}

func (x *OnlineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineResponse.ProtoReflect.Descriptor instead.
func (*OnlineResponse) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{18}
}

func (x *OnlineResponse) GetStates() []byte {
	if x != nil {
		return x.States
	}
	return nil
}

type RendezvousMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*RendezvousMessage_RegisterPeer
	//	*RendezvousMessage_RegisterPeerResponse
	//	*RendezvousMessage_PunchHoleRequest
	//	*RendezvousMessage_PunchHole
	//	*RendezvousMessage_PunchHoleSent
	//	*RendezvousMessage_PunchHoleResponse
	//	*RendezvousMessage_FetchLocalAddr
	//	*RendezvousMessage_LocalAddr
	//	*RendezvousMessage_ConfigureUpdate
	//	*RendezvousMessage_RegisterPk
	//	*RendezvousMessage_RegisterPkResponse
	//	*RendezvousMessage_SoftwareUpdate
	//	*RendezvousMessage_RequestRelay
	//	*RendezvousMessage_RelayResponse
	//	*RendezvousMessage_TestNatRequest
	//	*RendezvousMessage_TestNatResponse
	//	*RendezvousMessage_PeerDiscovery
	//	*RendezvousMessage_OnlineRequest
	//	*RendezvousMessage_OnlineResponse
	Union isRendezvousMessage_Union `protobuf_oneof:"union"`
}

func (x *RendezvousMessage) Reset() {
	*x = RendezvousMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_protos_rendezvous_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RendezvousMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RendezvousMessage) ProtoMessage() {}

func (x *RendezvousMessage) ProtoReflect() protoreflect.Message {
	mi := &file_model_protos_rendezvous_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RendezvousMessage.ProtoReflect.Descriptor instead.
func (*RendezvousMessage) Descriptor() ([]byte, []int) {
	return file_model_protos_rendezvous_proto_rawDescGZIP(), []int{19}
}

func (m *RendezvousMessage) GetUnion() isRendezvousMessage_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *RendezvousMessage) GetRegisterPeer() *RegisterPeer {
	if x, ok := x.GetUnion().(*RendezvousMessage_RegisterPeer); ok {
		return x.RegisterPeer
	}
	return nil
}

func (x *RendezvousMessage) GetRegisterPeerResponse() *RegisterPeerResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_RegisterPeerResponse); ok {
		return x.RegisterPeerResponse
	}
	return nil
}

func (x *RendezvousMessage) GetPunchHoleRequest() *PunchHoleRequest {
	if x, ok := x.GetUnion().(*RendezvousMessage_PunchHoleRequest); ok {
		return x.PunchHoleRequest
	}
	return nil
}

func (x *RendezvousMessage) GetPunchHole() *PunchHole {
	if x, ok := x.GetUnion().(*RendezvousMessage_PunchHole); ok {
		return x.PunchHole
	}
	return nil
}

func (x *RendezvousMessage) GetPunchHoleSent() *PunchHoleSent {
	if x, ok := x.GetUnion().(*RendezvousMessage_PunchHoleSent); ok {
		return x.PunchHoleSent
	}
	return nil
}

func (x *RendezvousMessage) GetPunchHoleResponse() *PunchHoleResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_PunchHoleResponse); ok {
		return x.PunchHoleResponse
	}
	return nil
}

func (x *RendezvousMessage) GetFetchLocalAddr() *FetchLocalAddr {
	if x, ok := x.GetUnion().(*RendezvousMessage_FetchLocalAddr); ok {
		return x.FetchLocalAddr
	}
	return nil
}

func (x *RendezvousMessage) GetLocalAddr() *LocalAddr {
	if x, ok := x.GetUnion().(*RendezvousMessage_LocalAddr); ok {
		return x.LocalAddr
	}
	return nil
}

func (x *RendezvousMessage) GetConfigureUpdate() *ConfigUpdate {
	if x, ok := x.GetUnion().(*RendezvousMessage_ConfigureUpdate); ok {
		return x.ConfigureUpdate
	}
	return nil
}

func (x *RendezvousMessage) GetRegisterPk() *RegisterPk {
	if x, ok := x.GetUnion().(*RendezvousMessage_RegisterPk); ok {
		return x.RegisterPk
	}
	return nil
}

func (x *RendezvousMessage) GetRegisterPkResponse() *RegisterPkResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_RegisterPkResponse); ok {
		return x.RegisterPkResponse
	}
	return nil
}

func (x *RendezvousMessage) GetSoftwareUpdate() *SoftwareUpdate {
	if x, ok := x.GetUnion().(*RendezvousMessage_SoftwareUpdate); ok {
		return x.SoftwareUpdate
	}
	return nil
}

func (x *RendezvousMessage) GetRequestRelay() *RequestRelay {
	if x, ok := x.GetUnion().(*RendezvousMessage_RequestRelay); ok {
		return x.RequestRelay
	}
	return nil
}

func (x *RendezvousMessage) GetRelayResponse() *RelayResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_RelayResponse); ok {
		return x.RelayResponse
	}
	return nil
}

func (x *RendezvousMessage) GetTestNatRequest() *TestNatRequest {
	if x, ok := x.GetUnion().(*RendezvousMessage_TestNatRequest); ok {
		return x.TestNatRequest
	}
	return nil
}

func (x *RendezvousMessage) GetTestNatResponse() *TestNatResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_TestNatResponse); ok {
		return x.TestNatResponse
	}
	return nil
}

func (x *RendezvousMessage) GetPeerDiscovery() *PeerDiscovery {
	if x, ok := x.GetUnion().(*RendezvousMessage_PeerDiscovery); ok {
		return x.PeerDiscovery
	}
	return nil
}

func (x *RendezvousMessage) GetOnlineRequest() *OnlineRequest {
	if x, ok := x.GetUnion().(*RendezvousMessage_OnlineRequest); ok {
		return x.OnlineRequest
	}
	return nil
}

func (x *RendezvousMessage) GetOnlineResponse() *OnlineResponse {
	if x, ok := x.GetUnion().(*RendezvousMessage_OnlineResponse); ok {
		return x.OnlineResponse
	}
	return nil
}

type isRendezvousMessage_Union interface {
	isRendezvousMessage_Union()
}

type RendezvousMessage_RegisterPeer struct {
	RegisterPeer *RegisterPeer `protobuf:"bytes,6,opt,name=register_peer,json=registerPeer,proto3,oneof"`
}

type RendezvousMessage_RegisterPeerResponse struct {
	RegisterPeerResponse *RegisterPeerResponse `protobuf:"bytes,7,opt,name=register_peer_response,json=registerPeerResponse,proto3,oneof"`
}

type RendezvousMessage_PunchHoleRequest struct {
	PunchHoleRequest *PunchHoleRequest `protobuf:"bytes,8,opt,name=punch_hole_request,json=punchHoleRequest,proto3,oneof"`
}

type RendezvousMessage_PunchHole struct {
	PunchHole *PunchHole `protobuf:"bytes,9,opt,name=punch_hole,json=punchHole,proto3,oneof"`
}

type RendezvousMessage_PunchHoleSent struct {
	PunchHoleSent *PunchHoleSent `protobuf:"bytes,10,opt,name=punch_hole_sent,json=punchHoleSent,proto3,oneof"`
}

type RendezvousMessage_PunchHoleResponse struct {
	PunchHoleResponse *PunchHoleResponse `protobuf:"bytes,11,opt,name=punch_hole_response,json=punchHoleResponse,proto3,oneof"`
}

type RendezvousMessage_FetchLocalAddr struct {
	FetchLocalAddr *FetchLocalAddr `protobuf:"bytes,12,opt,name=fetch_local_addr,json=fetchLocalAddr,proto3,oneof"`
}

type RendezvousMessage_LocalAddr struct {
	LocalAddr *LocalAddr `protobuf:"bytes,13,opt,name=local_addr,json=localAddr,proto3,oneof"`
}

type RendezvousMessage_ConfigureUpdate struct {
	ConfigureUpdate *ConfigUpdate `protobuf:"bytes,14,opt,name=configure_update,json=configureUpdate,proto3,oneof"`
}

type RendezvousMessage_RegisterPk struct {
	RegisterPk *RegisterPk `protobuf:"bytes,15,opt,name=register_pk,json=registerPk,proto3,oneof"`
}

type RendezvousMessage_RegisterPkResponse struct {
	RegisterPkResponse *RegisterPkResponse `protobuf:"bytes,16,opt,name=register_pk_response,json=registerPkResponse,proto3,oneof"`
}

type RendezvousMessage_SoftwareUpdate struct {
	SoftwareUpdate *SoftwareUpdate `protobuf:"bytes,17,opt,name=software_update,json=softwareUpdate,proto3,oneof"`
}

type RendezvousMessage_RequestRelay struct {
	RequestRelay *RequestRelay `protobuf:"bytes,18,opt,name=request_relay,json=requestRelay,proto3,oneof"`
}

type RendezvousMessage_RelayResponse struct {
	RelayResponse *RelayResponse `protobuf:"bytes,19,opt,name=relay_response,json=relayResponse,proto3,oneof"`
}

type RendezvousMessage_TestNatRequest struct {
	TestNatRequest *TestNatRequest `protobuf:"bytes,20,opt,name=test_nat_request,json=testNatRequest,proto3,oneof"`
}

type RendezvousMessage_TestNatResponse struct {
	TestNatResponse *TestNatResponse `protobuf:"bytes,21,opt,name=test_nat_response,json=testNatResponse,proto3,oneof"`
}

type RendezvousMessage_PeerDiscovery struct {
	PeerDiscovery *PeerDiscovery `protobuf:"bytes,22,opt,name=peer_discovery,json=peerDiscovery,proto3,oneof"`
}

type RendezvousMessage_OnlineRequest struct {
	OnlineRequest *OnlineRequest `protobuf:"bytes,23,opt,name=online_request,json=onlineRequest,proto3,oneof"`
}

type RendezvousMessage_OnlineResponse struct {
	OnlineResponse *OnlineResponse `protobuf:"bytes,24,opt,name=online_response,json=onlineResponse,proto3,oneof"`
}

func (*RendezvousMessage_RegisterPeer) isRendezvousMessage_Union() {}

func (*RendezvousMessage_RegisterPeerResponse) isRendezvousMessage_Union() {}

func (*RendezvousMessage_PunchHoleRequest) isRendezvousMessage_Union() {}

func (*RendezvousMessage_PunchHole) isRendezvousMessage_Union() {}

func (*RendezvousMessage_PunchHoleSent) isRendezvousMessage_Union() {}

func (*RendezvousMessage_PunchHoleResponse) isRendezvousMessage_Union() {}

func (*RendezvousMessage_FetchLocalAddr) isRendezvousMessage_Union() {}

func (*RendezvousMessage_LocalAddr) isRendezvousMessage_Union() {}

func (*RendezvousMessage_ConfigureUpdate) isRendezvousMessage_Union() {}

func (*RendezvousMessage_RegisterPk) isRendezvousMessage_Union() {}

func (*RendezvousMessage_RegisterPkResponse) isRendezvousMessage_Union() {}

func (*RendezvousMessage_SoftwareUpdate) isRendezvousMessage_Union() {}

func (*RendezvousMessage_RequestRelay) isRendezvousMessage_Union() {}

func (*RendezvousMessage_RelayResponse) isRendezvousMessage_Union() {}

func (*RendezvousMessage_TestNatRequest) isRendezvousMessage_Union() {}

func (*RendezvousMessage_TestNatResponse) isRendezvousMessage_Union() {}

func (*RendezvousMessage_PeerDiscovery) isRendezvousMessage_Union() {}

func (*RendezvousMessage_OnlineRequest) isRendezvousMessage_Union() {}

func (*RendezvousMessage_OnlineResponse) isRendezvousMessage_Union() {}

var File_model_protos_rendezvous_proto protoreflect.FileDescriptor

var file_model_protos_rendezvous_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x68, 0x62, 0x62, 0x22, 0x36, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x35, 0x0a, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x78, 0x0a, 0x09, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4e, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x28,
	0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x48, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x02, 0x63, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x02,
	0x63, 0x75, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0a, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x7e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x55, 0x49, 0x44, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x4f, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x07, 0x22, 0xec, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62, 0x2e,
	0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x22, 0x53, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x55, 0x53, 0x45, 0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd3, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x0e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x54, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x98, 0x01,
	0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x22, 0x35, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x28, 0x0a,
	0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xd2, 0x09, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x70, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x75, 0x6e,
	0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x75, 0x6e, 0x63,
	0x68, 0x48, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x13, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3e, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6b,
	0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6b, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2a, 0x4a, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x44, 0x50, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x07, 0x4e, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e,
	0x41, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_model_protos_rendezvous_proto_rawDescOnce sync.Once
	file_model_protos_rendezvous_proto_rawDescData = file_model_protos_rendezvous_proto_rawDesc
)

func file_model_protos_rendezvous_proto_rawDescGZIP() []byte {
	file_model_protos_rendezvous_proto_rawDescOnce.Do(func() {
		file_model_protos_rendezvous_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_protos_rendezvous_proto_rawDescData)
	})
	return file_model_protos_rendezvous_proto_rawDescData
}

var file_model_protos_rendezvous_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_model_protos_rendezvous_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_model_protos_rendezvous_proto_goTypes = []interface{}{
	(ConnType)(0),                  // 0: hbb.ConnType
	(NatType)(0),                   // 1: hbb.NatType
	(RegisterPkResponse_Result)(0), // 2: hbb.RegisterPkResponse.Result
	(PunchHoleResponse_Failure)(0), // 3: hbb.PunchHoleResponse.Failure
	(*RegisterPeer)(nil),           // 4: hbb.RegisterPeer
	(*RegisterPeerResponse)(nil),   // 5: hbb.RegisterPeerResponse
	(*PunchHoleRequest)(nil),       // 6: hbb.PunchHoleRequest
	(*PunchHole)(nil),              // 7: hbb.PunchHole
	(*TestNatRequest)(nil),         // 8: hbb.TestNatRequest
	(*TestNatResponse)(nil),        // 9: hbb.TestNatResponse
	(*PunchHoleSent)(nil),          // 10: hbb.PunchHoleSent
	(*RegisterPk)(nil),             // 11: hbb.RegisterPk
	(*RegisterPkResponse)(nil),     // 12: hbb.RegisterPkResponse
	(*PunchHoleResponse)(nil),      // 13: hbb.PunchHoleResponse
	(*ConfigUpdate)(nil),           // 14: hbb.ConfigUpdate
	(*RequestRelay)(nil),           // 15: hbb.RequestRelay
	(*RelayResponse)(nil),          // 16: hbb.RelayResponse
	(*SoftwareUpdate)(nil),         // 17: hbb.SoftwareUpdate
	(*FetchLocalAddr)(nil),         // 18: hbb.FetchLocalAddr
	(*LocalAddr)(nil),              // 19: hbb.LocalAddr
	(*PeerDiscovery)(nil),          // 20: hbb.PeerDiscovery
	(*OnlineRequest)(nil),          // 21: hbb.OnlineRequest
	(*OnlineResponse)(nil),         // 22: hbb.OnlineResponse
	(*RendezvousMessage)(nil),      // 23: hbb.RendezvousMessage
}
var file_model_protos_rendezvous_proto_depIdxs = []int32{
	1,  // 0: hbb.PunchHoleRequest.nat_type:type_name -> hbb.NatType
	0,  // 1: hbb.PunchHoleRequest.conn_type:type_name -> hbb.ConnType
	1,  // 2: hbb.PunchHole.nat_type:type_name -> hbb.NatType
	14, // 3: hbb.TestNatResponse.cu:type_name -> hbb.ConfigUpdate
	1,  // 4: hbb.PunchHoleSent.nat_type:type_name -> hbb.NatType
	2,  // 5: hbb.RegisterPkResponse.result:type_name -> hbb.RegisterPkResponse.Result
	3,  // 6: hbb.PunchHoleResponse.failure:type_name -> hbb.PunchHoleResponse.Failure
	1,  // 7: hbb.PunchHoleResponse.nat_type:type_name -> hbb.NatType
	0,  // 8: hbb.RequestRelay.conn_type:type_name -> hbb.ConnType
	4,  // 9: hbb.RendezvousMessage.register_peer:type_name -> hbb.RegisterPeer
	5,  // 10: hbb.RendezvousMessage.register_peer_response:type_name -> hbb.RegisterPeerResponse
	6,  // 11: hbb.RendezvousMessage.punch_hole_request:type_name -> hbb.PunchHoleRequest
	7,  // 12: hbb.RendezvousMessage.punch_hole:type_name -> hbb.PunchHole
	10, // 13: hbb.RendezvousMessage.punch_hole_sent:type_name -> hbb.PunchHoleSent
	13, // 14: hbb.RendezvousMessage.punch_hole_response:type_name -> hbb.PunchHoleResponse
	18, // 15: hbb.RendezvousMessage.fetch_local_addr:type_name -> hbb.FetchLocalAddr
	19, // 16: hbb.RendezvousMessage.local_addr:type_name -> hbb.LocalAddr
	14, // 17: hbb.RendezvousMessage.configure_update:type_name -> hbb.ConfigUpdate
	11, // 18: hbb.RendezvousMessage.register_pk:type_name -> hbb.RegisterPk
	12, // 19: hbb.RendezvousMessage.register_pk_response:type_name -> hbb.RegisterPkResponse
	17, // 20: hbb.RendezvousMessage.software_update:type_name -> hbb.SoftwareUpdate
	15, // 21: hbb.RendezvousMessage.request_relay:type_name -> hbb.RequestRelay
	16, // 22: hbb.RendezvousMessage.relay_response:type_name -> hbb.RelayResponse
	8,  // 23: hbb.RendezvousMessage.test_nat_request:type_name -> hbb.TestNatRequest
	9,  // 24: hbb.RendezvousMessage.test_nat_response:type_name -> hbb.TestNatResponse
	20, // 25: hbb.RendezvousMessage.peer_discovery:type_name -> hbb.PeerDiscovery
	21, // 26: hbb.RendezvousMessage.online_request:type_name -> hbb.OnlineRequest
	22, // 27: hbb.RendezvousMessage.online_response:type_name -> hbb.OnlineResponse
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_model_protos_rendezvous_proto_init() }
func file_model_protos_rendezvous_proto_init() {
	if File_model_protos_rendezvous_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_model_protos_rendezvous_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunchHoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunchHole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunchHoleSent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunchHoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchLocalAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_protos_rendezvous_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RendezvousMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_model_protos_rendezvous_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PunchHoleResponse_NatType)(nil),
		(*PunchHoleResponse_IsLocal)(nil),
	}
	file_model_protos_rendezvous_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RelayResponse_Id)(nil),
		(*RelayResponse_Pk)(nil),
	}
	file_model_protos_rendezvous_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*RendezvousMessage_RegisterPeer)(nil),
		(*RendezvousMessage_RegisterPeerResponse)(nil),
		(*RendezvousMessage_PunchHoleRequest)(nil),
		(*RendezvousMessage_PunchHole)(nil),
		(*RendezvousMessage_PunchHoleSent)(nil),
		(*RendezvousMessage_PunchHoleResponse)(nil),
		(*RendezvousMessage_FetchLocalAddr)(nil),
		(*RendezvousMessage_LocalAddr)(nil),
		(*RendezvousMessage_ConfigureUpdate)(nil),
		(*RendezvousMessage_RegisterPk)(nil),
		(*RendezvousMessage_RegisterPkResponse)(nil),
		(*RendezvousMessage_SoftwareUpdate)(nil),
		(*RendezvousMessage_RequestRelay)(nil),
		(*RendezvousMessage_RelayResponse)(nil),
		(*RendezvousMessage_TestNatRequest)(nil),
		(*RendezvousMessage_TestNatResponse)(nil),
		(*RendezvousMessage_PeerDiscovery)(nil),
		(*RendezvousMessage_OnlineRequest)(nil),
		(*RendezvousMessage_OnlineResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_protos_rendezvous_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_model_protos_rendezvous_proto_goTypes,
		DependencyIndexes: file_model_protos_rendezvous_proto_depIdxs,
		EnumInfos:         file_model_protos_rendezvous_proto_enumTypes,
		MessageInfos:      file_model_protos_rendezvous_proto_msgTypes,
	}.Build()
	File_model_protos_rendezvous_proto = out.File
	file_model_protos_rendezvous_proto_rawDesc = nil
	file_model_protos_rendezvous_proto_goTypes = nil
	file_model_protos_rendezvous_proto_depIdxs = nil
}
